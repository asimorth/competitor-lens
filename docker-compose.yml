version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: competitorlens-db
    environment:
      POSTGRES_DB: competitor_lens
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - competitorlens-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Queue
  redis:
    image: redis:7-alpine
    container_name: competitorlens-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - competitorlens-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: competitorlens-backend
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@postgres:5432/competitor_lens
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION:-eu-west-1}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
      CDN_URL: ${CDN_URL}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      RATE_LIMIT_PUBLIC: ${RATE_LIMIT_PUBLIC:-50}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/prisma:/app/prisma
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - competitorlens-network
    command: >
      sh -c "
        npx prisma migrate deploy &&
        npx prisma generate &&
        npm start
      "

  # Workers
  workers:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: competitorlens-workers
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@postgres:5432/competitor_lens
      REDIS_HOST: redis
      REDIS_PORT: 6379
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION:-eu-west-1}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
      CDN_URL: ${CDN_URL}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    volumes:
      - ./backend/uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - competitorlens-network
    command: npm run workers:v2

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3001/api}
    container_name: competitorlens-frontend
    environment:
      NODE_ENV: ${NODE_ENV:-production}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - competitorlens-network

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: competitorlens-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/certs:/etc/nginx/certs:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    networks:
      - competitorlens-network
    profiles:
      - production

networks:
  competitorlens-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: